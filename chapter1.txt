This is the first version


+Creating git local repository
-initialize git:
comm :git init
-open a hiddden files:
comm :ls -a
find the .git hidden file. that's the git local repository

+get files into staging area and commit:
-to see the status of certain files is inside staging area
comm :git status
-add files into staging area and start tracking changes in it 
comm :git add {filename.format}
-to add all files inside folder
comm :git add * / git add . {better use .}
-remove files from staging area/unstaged
comm :git rm --cached {filename.format}
-to commit and add certain commit message
comm :git commit -m "{the message you want {Better in present tense}}"
-you can see what commit you've made with
comm :git log
- need author. insert your username and email in this repository only
comm :git config user.email "{your@email}"
comm :git config user.name "{your name}"
- don't include --global whatsoever cus it changes globally on your git computer

- look at the different or what has been modified
comm :git diff {filename that has been modified.format}

- discard changes in working directory
- in hyperterminal
comm :git restore {filename that has been modified.format}
- in cmd
comm :git checkout {filename that has been modified.format}

+ github
- make new remote repository
comm :git remote add origin{you can freely specify the name but stick to origin} {URL}
- push to the remote repository
comm :git push origin{name local repo} master{name remote repo can be named main}

- cloning
comm :git clone {URL}

+ branching
- make new branch
comm :git branch {Name of the branch}
- check branches that already maked
comm :git branch

- switch to another branch
comm :git checkout {Name of the branch that already maked}

- merging
- it need to be in the branch that you want to changes (usually at master/main branch)
comm :git merge {name of the other branch that change this branch}
- if vim opens up, you can enter merge message or just type :q! to save and quit
